{"version":3,"sources":["class/common.js"],"names":["Common","obj","attributes","item","num","size","output","toString","length","n","isNaN","parseFloat","isFinite","decimals","includes","Math","round","arr","split","sig","number"],"mappings":";;;;;;;;;;IAAqBA,M;;;;;;;;;AAEnB;;;;;4BAKQC,G,EAAKC,U,EAAY;AACvB,UAAI,CAACD,GAAL,EAAU;AADa;AAAA;AAAA;;AAAA;AAEvB,6BAAiBC,UAAjB,8HAA6B;AAAA,cAApBC,IAAoB;;AAC3B,eAAKA,IAAL,IAAcF,IAAIE,IAAJ,CAAD,GAAcF,IAAIE,IAAJ,CAAd,GAA0B,EAAvC;AACD;AAJsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKxB;;AAED;;;;;;;;;;;wBAQIC,G,EAAe;AAAA,UAAVC,IAAU,uEAAH,CAAG;;AACjB,UAAIC,SAASF,IAAIG,QAAJ,EAAb;AACA,aAAOD,OAAOE,MAAP,GAAgBH,IAAvB;AAA6BC,uBAAaA,MAAb;AAA7B,OACA,OAAOA,MAAP;AACD;;AAED;;;;;;;;;8BAMUG,C,EAAG;AACX,aAAO,CAACC,MAAMC,WAAWF,CAAX,CAAN,CAAD,IAAyBG,SAASH,CAAT,CAAhC;AACD;;AAED;;;;;;;;;0BAMML,G,EAAmB;AAAA,UAAdS,QAAc,uEAAH,CAAG;;AACvB,UAAI,CAAC,CAAC,KAAKT,GAAN,EAAWU,QAAX,CAAoB,GAApB,CAAL,EAA+B;AAC7B,eAAO,EAAEC,KAAKC,KAAL,CAAWZ,MAAM,IAAN,GAAaS,QAAxB,IAAoC,IAApC,GAA2CA,QAA7C,CAAP;AACD,OAFD,MAEO;AACL,YAAII,MAAM,CAAC,KAAKb,GAAN,EAAWc,KAAX,CAAiB,GAAjB,CAAV;AACA,YAAIC,MAAM,EAAV;AACA,YAAI,CAACF,IAAI,CAAJ,CAAD,GAAUJ,QAAV,GAAqB,CAAzB,EAA4BM,MAAM,GAAN;AAC5B,eAAO,EAAEJ,KAAKC,KAAL,CAAW,CAACC,IAAI,CAAJ,CAAD,GAAU,GAAV,GAAgBE,GAAhB,IAAuB,CAACF,IAAI,CAAJ,CAAD,GAAUJ,QAAjC,CAAX,IAAyD,IAAzD,GAAgEA,QAAlE,CAAP;AACD;AACF;;AAED;;;;;;;;uCAKmBT,G,EAAK;AACtB,UAAIgB,SAAShB,IAAIG,QAAJ,EAAb;AACA,UAAIa,OAAON,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACxB,YAAII,QAAQE,OAAOF,KAAP,CAAa,GAAb,CAAZ;AACA,YAAIA,MAAM,CAAN,EAASV,MAAT,KAAoB,CAAxB,EAA2B,OAAUU,MAAM,CAAN,CAAV,SAAsBA,MAAM,CAAN,CAAtB,OAA3B,KACK,IAAIA,MAAM,CAAN,EAASV,MAAT,KAAoB,CAAxB,EAA2B,OAAOY,MAAP,CAA3B,KACA,OAAUF,MAAM,CAAN,CAAV,SAAsBA,MAAM,CAAN,EAAS,CAAT,CAAtB,GAAoCA,MAAM,CAAN,EAAS,CAAT,CAApC;AACN;AACD,aAAUE,MAAV;AACD;;;;;;kBArEkBpB,M","file":"common.js","sourcesContent":["export default class Common {\n\n  /**\n   * @description Hydrate current instance with obj attributes\n   * @param obj\n   * @param attributes\n   */\n  hydrate(obj, attributes) {\n    if (!obj) return\n    for (let item of attributes) {\n      this[item] = (obj[item]) ? obj[item] : ''\n    }\n  }\n\n  /**\n   * @description Return number with padding\n   * @example if id = 10, return 0010\n   * @param num\n   * @param size\n   * @return {string}\n   * @private\n   */\n  pad(num, size = 3) {\n    let output = num.toString()\n    while (output.length < size) output = `0${output}`\n    return output\n  }\n\n  /**\n   * @description Check if is a number\n   * @param n\n   * @returns {boolean}\n   * @private\n   */\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n)\n  }\n\n  /**\n   * @description Round float with x decimals\n   * @param num\n   * @param decimals, default 2 decimals\n   * @returns {number}\n   */\n  round(num, decimals = 2) {\n    if (!(\"\" + num).includes(\"e\")) {\n      return +(Math.round(num + 'e+' + decimals) + 'e-' + decimals)\n    } else {\n      let arr = ('' + num).split('e')\n      let sig = ''\n      if (+arr[1] + decimals > 0) sig = '+'\n      return +(Math.round(+arr[0] + 'e' + sig + (+arr[1] + decimals)) + 'e-' + decimals)\n    }\n  }\n\n  /**\n   * @description Format number to return number with two decimals\n   * @param num\n   * @return {string}\n   */\n  formatOutputNumber(num) {\n    let number = num.toString()\n    if (number.includes('.')) {\n      let split = number.split('.')\n      if (split[1].length === 1) return `${split[0]}.${split[1]}0`\n      else if (split[1].length === 2) return number\n      else return `${split[0]}.${split[1][0]}${split[1][1]}`\n    }\n    return `${number}.00`\n  }\n\n}\n"],"sourceRoot":"/Users/dimitri/repositories/invoice-generator/src"}